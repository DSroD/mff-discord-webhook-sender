{"version":3,"sources":["EmbedComponent.js","addimg.svg","MessageComponent.js","App.js","reportWebVitals.js","index.js"],"names":["EmbedComponent","embId","delFunc","updateFunc","Form","Group","className","Button","variant","onClick","Card","Body","Control","onChange","e","authorName","target","value","type","placeholder","embedTitle","embedDescription","MessageComponent","props","state","embeds","embed_data","nextId","username","message","avatarURL","webhook","localStorage","getItem","deleteEmbed","id","setState","filter","emb","data","addEmbed","updateEmbed","val","map","el","setWebhook","wh","setItem","setAvatarURL","url","prompt","style","backgroundImage","encodeURI","addimg","sendWebhookRequest","body","content","length","forEach","push","author","name","title","description","requestOptions","method","headers","JSON","stringify","fetch","bind","controlId","as","rows","this","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6bda74d5.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst EmbedComponent = ({embId, delFunc, updateFunc}) => {\r\n    return (\r\n        <Form.Group>\r\n        <div className=\"embed\">\r\n            <Button className=\"embed-close\" variant=\"outline-dark\" onClick={() => {delFunc(embId)}}>x</Button>\r\n            <Card className=\"embed-card\">\r\n                <Card.Body>\r\n                    <Form.Control onChange={(e) => updateFunc(embId, {authorName: e.target.value})} className=\"msg-form-input\" type=\"text\" placeholder=\"Author name\"/>\r\n                    <Form.Control onChange={(e) => updateFunc(embId, {embedTitle: e.target.value})} className=\"msg-form-input\" type=\"text\" placeholder=\"Embed title\"/>\r\n                    <Form.Control onChange={(e) => updateFunc(embId, {embedDescription: e.target.value})} className=\"msg-form-input\" type=\"text\" placeholder=\"Embed description\"/>\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n        </Form.Group>\r\n    )\r\n}\r\n\r\nexport default EmbedComponent;","export default __webpack_public_path__ + \"static/media/addimg.37b99a81.svg\";","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport EmbedComponent from './EmbedComponent.js';\r\nimport addimg from './addimg.svg';\r\n\r\nclass MessageComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.deleteEmbed = this.deleteEmbed.bind(this);\r\n    this.updateEmbed = this.updateEmbed.bind(this);\r\n  }\r\n\r\n  state = {\r\n    embeds: [],\r\n    embed_data: [],\r\n    nextId: 0,\r\n    username: '',\r\n    message: '',\r\n    avatarURL: '',\r\n    webhook: localStorage.getItem('webhookURI') || ''\r\n  }\r\n\r\n  deleteEmbed = (id) => {\r\n    this.setState({\r\n      embeds: this.state.embeds.filter(emb => emb.props.embId != id),\r\n      embed_data: this.state.embed_data.filter(data => data.id != id)\r\n    });\r\n  }\r\n\r\n  addEmbed = () => {\r\n    this.setState({\r\n        embeds: [...this.state.embeds, <EmbedComponent embId={this.state.nextId} delFunc={this.deleteEmbed} updateFunc={this.updateEmbed}/>],\r\n        embed_data: [... this.state.embed_data, {id: this.state.nextId, authorName: '', embedTitle: '', embedDescription: ''}],\r\n        nextId: this.state.nextId + 1\r\n    });\r\n  }\r\n\r\n  updateEmbed = (id, val) => {\r\n    this.setState({\r\n     embed_data: this.state.embed_data.map((el) => {\r\n        if(el.id != id) {return el;}\r\n        return {\r\n          ...el,\r\n          ...val\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  setWebhook = (wh) => {\r\n    localStorage.setItem('webhookURI', wh);\r\n    this.setState({\r\n      webhook: wh\r\n    })\r\n  }\r\n\r\n  setAvatarURL = (target) => {\r\n    const url = prompt('Image URL (leave blank to clear image):', this.url)\r\n    if(url) {\r\n      target.style.backgroundImage = `url(\"${encodeURI(url || addimg)}\")`;\r\n    }\r\n    else {\r\n      target.style.backgroundImage = null\r\n    }\r\n\r\n    this.setState({avatarURL: url});\r\n  }\r\n\r\n  sendWebhookRequest = (target) => {\r\n    var body = {\r\n      content: this.state.message,\r\n      username: this.state.username\r\n    }\r\n\r\n    if (this.state.avatarURL) {\r\n      body[\"avatar_url\"] = this.state.avatarURL;\r\n    }\r\n\r\n    if(this.state.embeds.length > 0) {\r\n      body[\"embeds\"] = [];\r\n      this.state.embed_data.forEach((el) => {\r\n        body.embeds.push({\r\n          author: {\r\n            name: el.authorName\r\n          },\r\n          title: el.embedTitle,\r\n          description: el.embedDescription\r\n        })\r\n      })\r\n    }\r\n\r\n    var requestOptions = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(body)\r\n    }\r\n\r\n    fetch(this.state.webhook, requestOptions);\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"message-form\">\r\n        <button onClick={(e) => this.setAvatarURL(e.target)} id=\"avatar\" className=\"avatar-main\" title=\"Set avatar URL\"></button>\r\n        <div>\r\n          <Form.Group className=\"main-message\" controlId=\"mff-discord-webhook.Message\">\r\n            <Form.Control onChange={(e) => this.setState({username: e.target.value})} className=\"msg-form-input\" type=\"text\" placeholder=\"Username\"/>\r\n            <Form.Control onChange={(e) => this.setState({message: e.target.value})} className=\"msg-form-input\" as=\"textarea\" rows={2} placeholder=\"Message (max 2000 characters)\" />\r\n          </Form.Group>\r\n          {this.state.embeds}\r\n          <Button className=\"msg-form-button\" variant=\"primary\" onClick={(e) => this.addEmbed()}>Add Embed</Button>\r\n        </div>\r\n        <Button className=\"msg-form-button\" variant=\"primary\" onClick={(e) => this.sendWebhookRequest(e.target)}>Send Message</Button>\r\n        <Form.Control onChange={(e) => this.setWebhook(e.target.value)} className=\"msg-form-input\" type=\"text\" placeholder=\"Discord webhook\" value={this.state.webhook}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MessageComponent;","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport MessageComponent from './MessageComponent.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <main className=\"App-main\">\n        <p>MFF Discord webhook stuff</p>\n          <MessageComponent />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}